generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id       String    @id @default(cuid())
  content  String?
  email    String?
  userName String
  likes    String[]
  date     DateTime  @default(now())
  comments Comment[]
  owner    User?     @relation(fields: [email], references: [email])
  reposts  Repost[]

  @@map("posts")
}

model User {
  id               String                 @id @default(cuid())
  email            String                 @unique
  username         String                 @unique
  date             DateTime               @default(now())
  blurhash         String?
  location         String?
  bio              String?
  color            String?
  links            String?
  followers        String[]
  following        String[]
  conversations    UsersInConversations[]
  comments         Comment[]
  messages         Message[]
  posts            Post[]
  repostedcomments RepostedComment[]
  reposts          Repost[]

  @@map("users")
}

model Repost {
  postId String
  userId String
  date   DateTime @default(now())
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("reposts")
}

model RepostedComment {
  commentId String
  userId    String
  date      DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@map("repostedcomments")
}

model Conversation {
  id       String                 @id @default(cuid())
  date     DateTime               @default(now())
  users    UsersInConversations[]
  messages Message[]

  @@map("conversations")
}

model UsersInConversations {
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  date           DateTime     @default(now())
  message        String
  userId         String
  status         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Comment {
  id               String            @id @default(cuid())
  content          String
  postId           String
  likes            String[]
  userId           String
  userName         String
  date             DateTime          @default(now())
  parentId         String?
  parent           Comment?          @relation("CommentReplies", fields: [parentId], references: [id])
  replies          Comment[]         @relation("CommentReplies")
  post             Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  repostedcomments RepostedComment[]

  @@map("comments")
}
