generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id         String    @id @default(cuid())
  content    String?
  email      String?
  userName   String 
  likes      String[]
  comments   Comment[]
  date       DateTime  @default(now())
  owner      User?     @relation(fields: [email], references: [email])
  reposts    Repost[]  // Relation to Repost model

  @@map("posts")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  reposts   Repost[]  // Reposts the user has made
  date      DateTime  @default(now())
  blurhash  String?
  location  String?
  bio       String?
  color     String?
  links     String?
  followers String[]
  following String[]
  posts     Post[]
  comments  Comment[]
  conversations  UsersInConversations[]
  messages  Message[]

  @@map("users")
}

model Repost {
  postId     String
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date       DateTime  @default(now())  // Date when the post was reposted

  @@id([userId, postId])
  @@map("reposts")
}

model Conversation {
  id        String    @id @default(cuid())
  messages  Message[]
  date      DateTime  @default(now())
  users     UsersInConversations[]

  @@map("conversations")
}

model UsersInConversations {
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId   String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  @@id([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  date           DateTime     @default(now())
  message        String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  status         String
  @@map("messages")
}

model Comment {
  id       String    @id @default(cuid())
  content  String
  postId   String
  likes    String[]
  userId   String
  userName String
  date     DateTime  @default(now())
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId String?   // Nullable field for the parent comment
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}
